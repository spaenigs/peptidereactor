CNFpred1.66 (A single-template protein threading package using context-specific information and Conditional Neural Fields)

Author: Jianzhu Ma, Jian Peng, Sheng Wang and Jinbo Xu
Contact email: jinboxu@gmail.com

This package is provided AS IS without any warranty. You can use it for any purpose (e.g., CASP), 
but please do not incorporate it into a protein structure prediction web server WITHOUT explicit permission from the authors
since we are running a server (http://raptorx.uchicago.edu) based upon this program. 

================ABOUT

This package contains all the programs and data needed for CNFpred (X86_64 Linux version).
CNFpred can run on multiple cores of a single Linux workstation without any external libraries.
CNFpred can also run on a Linux cluster as long as OpenMPI (http://www.open-mpi.org) is installed and correctly configured.
CNFpred is designed to align and identify distantly-related protein templates for a query protein sequence. 
For a multi-domain protein sequence, you can either cut it into domains using Pfam or CDD before running CNFpred. 
Or you can cut it into domains based upon the CNFpred result.

References:

Jian Peng and Jinbo Xu. Low-homology protein threading. Bioinformatics (Proceedings of ISMB 2010), July 2010.

Jianzhu Ma, Jian Peng, Sheng Wang and Jinbo Xu. A Conditional Neural Fields Model for Protein Threading.
Bioinformatics (Proceedings of ISMB 2012), July 2012.

Jianzhu Ma, Sheng Wang and Jinbo Xu. Protein Threading Using a New Context-Specific Alignment Potential.
Bioinformatics (Proceedings of ISMB 2013), July 2013.

=================CONTENT

The package consists of the following main programs:

1. buildFeature: generate features for a given query protein sequence

2. CNFalign: align one target protein sequence to one template. 
	There are three different implementations CNFalign_lite, CNFalign_fast and CNFalign_normal,
	all of which have the same user interface. This package currently contains only CNFalign_lite. 

3. CNFsearch or CNFsearch_mpi: search similar templates in a database for a query protein sequence. 
	CNFsearch and CNFsearch_mpi are two programs that generate exactly the same results. Meanwhile, CNFsearch is a multi-thread program that can run on
	multiple CPUs of a single compute node and CNFsearch_mpi is a MPI-based version that can run on a Linux cluster of multiple compute nodes.
	As such, CNFsearch_mpi can make use of many more CPUs (if available) than CNFsearch.
	However, you can run CNFsearch on any 64-bit Linux system, but have to install OpenMPI to run CNFsearch_mpi.
	On the other hand, even if OpenMPI is not installed on your system, you can still run CNFsearch. 

	CNFsearch or CNFsearch_mpi calls CNFalign_lite, CNFalign_fast or CNFalign_normal, depending on CPU types (automatically).
	CNFalign_lite is 5-6 times faster than CNFalign_fast, which in turn is 30% faster than CNFalign_normal.
	However, CNFalign_lite is 2% worse than the other two in terms of accuracy.
	For example, on all the CASP10 targets, CNFalign_lite obtains accumulative TMscore 74.1 while CNFalign_fast 75.5.
	

4. build3Dmodel: build a 3D model for a query protein sequence from an alignment

5. buildTopModels: build top 3D models for a query protein according to the CNFsearch result


================DOWNLOAD

Please download the following packages: 
1) CNFsearch1.63_release.tar.gz (~100M): the package contains all the executable programs.
2) TPL_BC40.tar.gz (~900M): a template database in which any two proteins share no more than 40% sequence identity
3) TPL_Remain.tar.gz (~1G): this package and TPL_BC40.tar.gz form a complete template database in which any two proteins can share up to 99% sequence identity
4) nr70.tar.gz (~1.6G) and nr90.tar.gz (~2.3G): the NR70 and NR90 protein sequence databases, already formatted using formatdb in the BLAST package. 
5) TemplateLists.tar.gz (~1M): the package contains some template lists.

The below PDB packages are necessary if you want to build 3D models (by build3Dmodel or buildTopModels) from alignments using MODELLER. 
We suggest that you use our PDB files to avoid inconsistency between the alignment files and the PDB files in the Protein Data Bank.
6) pdb_BC40.tar.gz (~700M): the reformatted PDB files corresponding to all the templates in TPL_BC40.tar.gz
7) pdb_Remain.tar.gz (~900M): the reformatted PDB files corresponding to all the templates in TPL_Remain.tar.gz

Note: 1) The MODELLER package, which is needed by build3Dmodel or buildTopModels, is not enclosed in this package.
2) The template databases will be updated weekly. Whenever you download a new version of TPL_BC40.tar.gz and TPL_Remain.tar.gz,
you shall also download TemplateLists.tar.gz. Otherwise, you will not be able to use the updated template database.


================INSTALL

0. The programs are compiled and tested on Ubuntu Linux OS, with gcc4.4 and OpenMPI.

1. Configure

Uncompress CNFsearch1.63_release.tar.gz using command "tar -xzf CNFsearch1.63_release.tar.gz" and you shall then see a folder CNFsearch1.63/.
Change the current working directory to CNFsearch1.63/, you shall see the following files and folders:
1) executable files: buildFeature, CNFalign_lite, CNFsearch_mpi, CNFsearch, build3Dmodel, buildTopModels and setup.pl
2) folders: databases, TGT, util and tmp

In CNFsearch1.63/, run the following command to do some configurations for CNFsearch.
./setup.pl

Note: whenever you update the CNFsearch package or move CNFsearch to another folder, you shall run setup.pl again to reconfigure.

The following installation procedure assumes that the current working directory is CNFsearch1.63/. 

2. NR database

If databases/NR_new/ does not exist, create one.
Move the two NR packages to databases/NR_new/ and then uncompress them.

3. Template Database
If databases/TPL_BC100/ does not exist, create one.

Uncompress TPL_BC40.tar.gz and you shall see one folder TPL_BC40/
Uncompress TPL_Remain.tar.gz and you shall see one folder TPL_Remain/
Move all the .tpl files in TPL_BC40/ and TPL_Remain/ to databases/TPL_BC100 and then delete two empty folders TPL_BC40/ and TPL_Remain/.

In databases/ you shall see some template database lists. 
You can create your own template lists and save them in databases/.
There are also some template list files included in TemplateLists.tar.gz
Whenever the template database is updated, TemplateLists.tar.gz (which contains some list files) is also updated.

4. PDB files [optional]
If databases/pdb_BC100 does not exist, create one.

Uncompress pdb_BC40.tar.gz and you shall see one folder pdb_BC40/.
Uncompress pdb_Remain.tar.gz and you shall see one folder pdb_Remain/.
Move all the .pdb files in pdb_BC40/ and pdb_Remain/ to databases/pdb_BC100 and then delete the two empty folders pdb_BC40/ and pdb_Remain/.

================USAGE

ATTENTION: Each user has to install one copy of the CNFsearch package in his/her own account in order to run CNFpred correctly. 
Nevertheless, the NR, TPL and PDB databases may be shared among multiple users through symbolic links. 


1. Generate the feature file (.tgt) for a given protein sequence

	Given a sequence file NAME.seq where NAME is the sequence name (e.g., T0607), run the following command:
		./buildFeature -i seq_file [-o tgt_file ] [-c cpu_num]

	tgt_file is the output feature file. If not specified, the default file is NAME.tgt where NAME is the sequence name.
	cpu_num specifies the number of CPUs to be used for BLAST.

	Example:
		./buildFeature -i T0607.fasta -c 4

2. Pairwise alignment using CNFalign

	./CNFalign_lite -t template_name -q target_name [-l tpl_root] [-g tgt_root] [-d output_root]
or
	./CNFalign_fast -t template_name -q target_name [-l tpl_root] [-g tgt_root] [-d output_root]
or
	./CNFalign_normal -t template_name -q target_name [-l tpl_root] [-g tgt_root] [-d output_root]
or
	
	options:

	-t template_name:              Template protein name. template_name.tpl file should be ready in the folder specified by tpl_root.

	-q target_name:                Target protein name. target_name.tgt file should already be available in the folder specified by tgt_root.

	-l tpl_root:                   The folder containing the template feature files (i.e., the .tpl files) [default = databases/TPL_BC100/].

	-g tgt_root:                   The folder containing the target feature files (i.e., the .tgt files) [default=TGT/].

	-d output_root:                The folder where to save the output file. If not specified,  no output will be generated. 
				       The output file is named as template_name-target_name.fasta and template_name-target_name.cnfpred.
	-n :                           Align two .tgt file, i.e., apply sequence-sequence alignment.

	Example:

		./CNFalign_lite -q T0607 -t 2kruA -l database/TPL_BC100/ -g TGT/ -d result/
	This command will align the target T0607 to template 2kruA and save the output files in result/.

	Attention: the memory consumption is high if you align a sequence longer than 1000 residues.

3. Database search using CNFsearch

	./CNFsearch -a NP -q query_name [-l template_list] [-d tpl_root] [-g tgt_root] [-o output_file] [-n topN] [-p pval]
or
	mpirun -np NP ./CNFsearch_mpi -q query_name [-l template_list] [-d tpl_root] [-g tgt_root] [-o output_file] [-n topN] [-p pval]

	options:

	-a (or -np) NP:               the number of CPUs to be used by CNFsearch or CNFsearch_mpi. For CNFsearch, NP shall not go beyond the number of available computing cores on a single compute node.

	-q query_name:                Query protein name. query_name.tgt should be already available in the folder specified by tgt_root.

	-l template_list:             List of all the templates [default = databases/bc40_list].

	-d tpl_root:                  The folder containing all the template files (i.e., .tpl files) [default = databases/TPL_BC100/].

	-g tgt_root:                  The folder containing all the target protein feature files (i.e., the .tgt files) [default = TGT/].

	-o output_file:               The file containing a brief summary of the prediction results [default = query_name.rank in current working directory].

	-n topN:                      Only keep the results for the top topN templates [default = 100].

	-p pval:                      Output only those templates with p-value less than the given cutoff pvale (default 0.005).

	Example:

	Suppose that the file TGT/T0607.tgt exists.

	To search the BC40 template database using 10 CPUs and keep those templates with p-value<0.001, run the following command:	
		./CNFsearch -a 10 -q T0607 -p 0.001
	or
		mpirun -np 10 ./CNFsearch_mpi -q T0607 -p 0.001

	To search the BC70 template database using 10 CPUs, keep 200 top templates or those templates with p-value<0.05, run the following command:	
		./CNFsearch -q T0607 -l databases/bc70_tpl_list -n 200 -p 0.05
	or
		mpirun -np 10 ./CNFsearch_mpi -q T0607 -l databases/bc70_tpl_list -n 200 -p 0.05

	The ranking results and the alignments to the top templates will be saved in T0607.rank.
	The alignment files to individual templates are saved in tmp/T0607/FASTA/.

	Attention: 

	1) When you use a job scheduler to submit the MPI job to a cluster or supercomputer, 
	please do not pass the TMP environment variable to the compute nodes which are scheduled to run this MPI job since CNFsearch will use the local TMP folder at each compute node. 

	2) When you use CNFsearch, make sure that NP is not larger than the number of available CPUs on a compute node.

	3) The maximum allowable query protein sequence length is 2000 residues.

	4) If you want to rerun a protein sequence, it is better to clean up its corresponding temproray files in tmp/ to avoid mixing old and new results.

	5) To speedup, you may search BC40 first to select the top 100 templates. Then you can search all the templates in BC100 which are similar to the top 100 templates. 
	You may use the databases/bc40_map_* file to find all the similar proteins of a given template.

	6) If you run a sequence with >1500 residues, please make sure that your machine has enough memory. 

	7) Enclose in this package please find some example output files (e.g., T0607-lite.rank), which can be used as control.


4. Build 3D models using MODELLER

	This package contains two programs that can build 3D models for a query protein sequence. build3Dmodel is used to build models from a single alignment while buildTopModels
	builds models from multiple top templates and corresponding alignments. 
	MODELLER (http://www.salilab.org/modeller/9v8/modeller-9v8.tar.gz) shall be installed to run build3Dmodel and buildTopModels.

	1) To build models from a single template and alignment, run the following command:
	./build3Dmodel -i align_file -q query_name [-d pdb_root] [ -m mod_bin ] [ -n mod_num ]

	the align_file is the input alignment file in fasta format, 
	query_name is the name of query protein for which you will build 3D models,
	mod_num is the number of 3D models to be generated from the alignment (default=1).
	pdb_root is the folder containing the PDB files of the template proteins (default = databases/pdb_BC100/),
	mod_bin is the MODELLER executable file (default = ~/bin/modeller9v8/bin/mod9v8).
	
	2) To build models from multiple top templates and corresponding alignments, run the following command:
	./buildTopModels -i rank_file [-k TopK] [-d pdb_root] [-m mod_bin]

	the rank_file is the output result generated by CNFsearch,
	TopK (default=1) specifies the number of top templates in rank_file to be used for model building, one model from each template.


5. What are missing in this package?

	1) A template re-rank module using context-specific pairwise distance-dependent potential. This re-ranking algorithm 
	can help improve threading accuracy by about 2 TMscore units on all the CASP10 targets compared to the fast mode.

	2) A multi-template threading module. This module can help improve the modeling accuracy by about 1.8 TMscore units on all the CASP10 targets compared to 1).
	
	3) A module for both local and global alignment quality assessment.

	All these three modules are implemented in our RaptorX web server.

6. Caveats
	Currently the alignment score-based ranking aglorithm is biased towards templates with larger coverage on the query sequence.
	Given a multi-domain query protein sequence S and its two templates T1 and T2, if T1 is a close homolog but can only cover a short domain of Si, 
	and T2 is a remote homolog but can cover all the domains, then it is very likely that T2 wll be ranked before T1. To rank T1 before T2, 
	you may cut S into domains and do search again. In the future release, we will provide one ranking algorithm that can rank short but close templates higher.

7. Running time
	The running time is linear to the query sequence length and template database size.
	It takes CNFalign_lite <10 minutes to search T0607 (471 AAs) against the BC100 database using 12 cores (Intel Xeon processor E5-2600 family).

8. Questions
	Please email to Dr. Jinbo Xu at jinboxu@gmail.com .
	If CNFpred cannot run on your computing systems, we may be able to recompile it.
