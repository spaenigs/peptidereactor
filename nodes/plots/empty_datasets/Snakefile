import matplotlib.pyplot as plt
import os
import yaml
import numpy as np
import re

TOKEN = config["token"]

rule all:
    input:
         config["png_out"]

rule count_non_empty_datasets:
    input:
         seq_based=config["sequence_based_encodings"],
         struc_based=config["structure_based_encodings"]
    output:
         f"data/temp/{TOKEN}/empty_datasets.yaml"
    run:
         def count_non_empty_files(ds, csv_paths):
             tmp = filter(lambda p: ds in p, csv_paths)
             return sum([1 if os.path.getsize(i) != 0 else 0 for i in tmp])

         count_data = {}
         for ds in config["datasets"]:
             count_data[ds] = \
                 {"seq_based": count_non_empty_files(ds, list(input.seq_based)),
                  "struc_based": count_non_empty_files(ds, list(input.struc_based))}

         count_data["max_seq_based"] = len(list(input.seq_based))
         count_data["max_struc_based"] = len(list(input.struc_based))

         with open(str(output[0]), mode="w") as f:
             yaml.safe_dump(count_data, f)

rule plot:
    input:
         f"data/temp/{TOKEN}/empty_datasets.yaml"
    output:
         config["png_out"]
    run:
         with open(str(input)) as f:
             count_data = yaml.safe_load(f)

         max_seq_based = count_data.pop("max_seq_based")
         max_struc_based = count_data.pop("max_struc_based")

         labels = sorted(count_data.keys(), key=lambda s: int(re.findall("\d+", s)[0]))
         count_seq_based_datasets = [count_data[ds]["seq_based"] for ds in labels]
         count_struc_based_datasets = [count_data[ds]["struc_based"] for ds in labels]

         x = np.arange(len(labels))  # the label locations
         width = 0.35  # the width of the bars

         fig, ax = plt.subplots()
         rects1 = ax.bar(x - width/2, count_seq_based_datasets, width, label="Sequence based")
         rects2 = ax.bar(x + width/2, count_struc_based_datasets, width, label="Structure based")

         plt.axhline(y=max_seq_based, color=rects1[0].get_facecolor(), linewidth=0.5, ls="dotted")
         plt.axhline(y=max_struc_based, color=rects2[0].get_facecolor(), linewidth=0.5, ls="dotted")

         ax.set_ylabel('Non-empty datasets')
         ax.set_title('Non-empty datasets by dataset and encoding type')
         ax.set_xticks(x)
         ax.set_xticklabels(labels, rotation=45)
         ax.legend()

         fig.tight_layout()
         plt.savefig(str(output))
