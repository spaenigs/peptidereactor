import joblib as jl
from snakemake.io import expand
from modlamp.core import read_fasta, save_fasta
import os

TOKEN = config["token"]
TARGET_PDBS = config["pdbs_out"]
TARGET_DIR = os.path.dirname(TARGET_PDBS[0]) + "/" \
    if type(TARGET_PDBS) == list else os.path.dirname(TARGET_PDBS) + "/"
PROFILE_DIR = TARGET_DIR.replace("pdb", "profile")

include:
    "setup.smk"

wildcard_constraints:
    seq_name="[A-Za-z0-9_]+"

rule split_input_data:
    input:
         config["fasta_in"],
         config["classes_in"]
    output:
         f"data/temp/{TOKEN}/{{seq_name}}.joblib"
    run:
         seqs, names = read_fasta(str(input[0]))
         with open(str(input[1])) as f:
             classes = list(map(lambda l: int(l.rstrip()), f.readlines()))
         seq_tuples = dict((name, tup) for name, tup in zip(names, zip(seqs, classes)))
         seq_tuple = seq_tuples[wildcards.seq_name]
         jl.dump(value=([[wildcards.seq_name, seq_tuple[0]]], seq_tuple[1]), filename=str(output))

rule to_fasta:
    input:
         f"data/temp/{TOKEN}/{{seq_name}}.joblib"
    output:
         f"data/temp/{TOKEN}/{{seq_name}}.fasta"
    run:
         seq_tuples, seq_class = jl.load(str(input))
         save_fasta(str(output), sequences=[seq_tuples[0][1]], names=[seq_tuples[0][0]])

rule build_feature:
    input:
         f"data/temp/{TOKEN}/{{seq_name}}.fasta",
         expand("apps/RaptorX/databases/{database}/{database}.moved.txt",
                database=["nr70", "nr90"])
    output:
         PROFILE_DIR + "{seq_name}.tgt"
    shell:
         """
         export OLDWD=$PWD; cd apps/RaptorX/;
         ./buildFeature -i $OLDWD/{input[0]} -o $OLDWD/{output} -c 1;
         cd - 1> /dev/null;
         """

rule search_template_database:
    input:
         PROFILE_DIR + "{seq_name}.tgt",
         expand("apps/RaptorX/databases/{database}/{database}.moved.txt",
                database=["TPL_BC40", "TPL_Remain", "TemplateLists"])
    output:
         PROFILE_DIR + "{seq_name}.rank"
    shell:
         f"""
         export OLDWD=$PWD; cd apps/RaptorX/;
         ./CNFsearch -a 1 -q {{wildcards.seq_name}} -g $OLDWD/{PROFILE_DIR} -o $OLDWD/{{output}}
         cd - 1> /dev/null;
         """

rule best_template:
    input:
         PROFILE_DIR + "{seq_name}.rank"
    output:
         f"data/temp/{TOKEN}/{{seq_name}}_best_template.txt"
    run:
         import re
         with open(str(input)) as f, open(str(output), mode="w") as out:
             lines_with_hit = list(filter(lambda line: re.search("^1\s", line) is not None, f.readlines()))
             if len(lines_with_hit) == 1:
                 line_with_hit = lines_with_hit[0]
                 id = line_with_hit.split()[1]
             else:
                 id = ""
                 out.write(f"{id}\n")
                 out.flush()

rule align_to_template:
    input:
         f"data/temp/{TOKEN}/{{seq_name}}_best_template.txt"
    output:
         f"data/temp/{TOKEN}/{{seq_name}}.raptorx.fasta",
         f"data/temp/{TOKEN}/{{seq_name}}.raptorx.cnfpred"
    shell:
         f"""
         export BEST_HIT=`head -n 1 {{input}}`;
         export OLDWD=$PWD; cd apps/RaptorX/;
         ./CNFalign_lite -q {{wildcards.seq_name}} \
                         -t $BEST_HIT \
                         -l databases/TPL_BC100/ \
                         -g $OLDWD/{PROFILE_DIR} \
                         -d $OLDWD/data/temp/{TOKEN}/;
         cd - 1> /dev/null;
         mv data/temp/{TOKEN}/$BEST_HIT-{{wildcards.seq_name}}.fasta {{output[0]}};
         mv data/temp/{TOKEN}/$BEST_HIT-{{wildcards.seq_name}}.cnfpred {{output[1]}};
         """

rule generate_structure:
    input:
         f"data/temp/{TOKEN}/{{seq_name}}.raptorx.fasta",
         f"data/temp/{TOKEN}/{{seq_name}}.raptorx.cnfpred",
         expand("apps/RaptorX/databases/{database}/{database}.moved.txt",
                database=["pdb_BC40", "pdb_Remain"]),
         "apps/RaptorX/modeller_activated.txt"
    output:
         TARGET_DIR + "{seq_name}.pdb"
    shell:
         """
         export config_file=$(mod9.23 -v 2> >(grep config.py));
         cp {input[4]} `dirname $config_file`
         export OLDWD=$PWD; cd apps/RaptorX/;
         ./build3Dmodel -i $OLDWD/{input[0]} -q {wildcards.seq_name} -d databases/pdb_BC100/ -m mod9.23 2> /dev/null;
         mv *{wildcards.seq_name}.*.pdb $OLDWD/{output};
         cd - 1> /dev/null;
         """

# onsuccess:
#     shell("rm -r apps/RaptorX/tmp/")
#
# onerror:
#     shell("rm -r apps/RaptorX/tmp/")
