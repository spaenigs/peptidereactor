from glob import glob
import os
import numpy as np
from pathos.multiprocessing import ProcessingPool as Pool
from more_itertools import chunked
from functools import partial

TOKEN = config["token"]

rule all:
    input:
         f"data/temp/{TOKEN}/filtered.txt"

rule collect_encodings:
    input:
         sequence_based_encodings=config["sequence_based_encodings_in"],
         structure_based_encodings=config["structure_based_encodings_in"]
    output:
         temp(f"data/temp/{TOKEN}/collected.txt")
    run:
         def copy_files(from_files, target_dir):
              for i in from_files:
                 dataset = i.split("/")[1]
                 shell(f"cp {i} {target_dir}{dataset}-{os.path.basename(i)}")

         def run(from_files, target_dir):
             p = Pool(8)
             chunk_len = int(np.round(len(from_files)/8))
             chunks = chunked(from_files, chunk_len)
             pfunc = partial(copy_files, target_dir=target_dir)
             p.map(pfunc, chunks)

         run(list(input.sequence_based_encodings), str(config["sequence_based_encodings_out"]))
         run(list(input.structure_based_encodings), str(config["structure_based_encodings_out"]))

         shell("touch {output}")

rule remove_empty_datasets:
    input:
         config["sequence_based_encodings_out"],
         config["structure_based_encodings_out"],
         f"data/temp/{TOKEN}/collected.txt"
    output:
         temp(f"data/temp/{TOKEN}/filtered.txt")
    run:
         def filter_files(from_files, target_dir):
             for csv_path in from_files:
                 if os.path.getsize(csv_path) == 0:
                     continue
                 else:
                     shell(f"cp {csv_path} {target_dir}")

         def run(from_files, target_dir):
             p = Pool(8)
             chunk_len = int(np.round(len(from_files)/8))
             chunks = chunked(from_files, chunk_len)
             pfunc = partial(filter_files, target_dir=target_dir)
             p.map(pfunc, chunks)

         # TODO parse available cores
         run(glob(str(input[0]) + "*.csv"), config["csv_dir_out"])
         run(glob(str(input[1]) + "*.csv"), config["csv_dir_out"])

         shell("touch {output}")