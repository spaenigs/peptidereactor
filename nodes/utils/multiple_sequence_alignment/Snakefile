from Bio import SeqIO
from Bio.Align.Applications import MuscleCommandline
from modlamp.core import read_fasta, save_fasta

import os

TOKEN = config["token"]

if type(config["fastas_in"]) == list:
    FASTA_DIR = os.path.dirname(config["fastas_in"][0]) + "/"
    FASTAS_IN = config["fastas_in"]
else:
    FASTA_DIR = os.path.dirname(config["fastas_in"]) + "/"
    FASTAS_IN = [config["fastas_in"]]


rule all:
    input:
         config["fastas_out"]

rule multiple_sequence_alignment:
    input:
         f"{FASTA_DIR}{{name}}.fasta"
    output:
         temp(f"data/temp/{TOKEN}/{{name}}_msa.tmp")
    run:
         cline = MuscleCommandline(input=input[0], out=output[0])
         stdout, stderr = cline()

rule dump:
    input:
         f"{FASTA_DIR}{{name}}.fasta",
         f"data/temp/{TOKEN}/{{name}}_msa.tmp"
    output:
         temp(f"data/temp/{TOKEN}/{{name}}_msa.fasta")
    run:
         seqs, names = read_fasta(input[0])
         fastas_aligned = [[str(record.name), str(record.seq)]
                           for record in sorted(SeqIO.parse(input[1], "fasta"),
                                                key=lambda record: record.name)]
         d_new = dict((name, tup) for name, tup in fastas_aligned)
         # undo internal sorting from muscle
         seqs_sorted = [d_new[n] for n in names]
         save_fasta(output[0], seqs_sorted, names)

rule collect:
    input:
         expand(f"data/temp/{TOKEN}/{{name}}_msa.fasta",
                name=[os.path.basename(p).replace(".fasta", "") for p in FASTAS_IN])
    output:
         config["fastas_out"]
    run:
         for src, target in zip(list(input), output):
             shell(f"cp {src} {target}")

