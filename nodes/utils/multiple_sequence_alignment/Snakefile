from Bio import SeqIO
from Bio.Align.Applications import MuscleCommandline
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from modlamp.core import read_fasta, save_fasta

TOKEN = config["token"]

rule all:
    input:
         config["fasta_out"]

rule temp_file:
    input:
         config["fasta_in"],
         config["classes_in"]
    output:
        temp(f"data/temp/{TOKEN}/seqs.fasta")
    run:
        seqs, names = read_fasta(str(input[0]))
        with open(str(input[1])) as f:
            classes = list(map(lambda l: int(l.rstrip()), f.readlines()))
        input_data = [[[n, s] for n, s in zip(names, seqs)], classes]
        seq_records = list(map(lambda t: SeqRecord(Seq(t[1]), description=t[0], id=t[0]),
                               input_data[0]))
        SeqIO.write(seq_records, str(output), "fasta")

rule multiple_sequence_alignment:
    input:
         f"data/temp/{TOKEN}/seqs.fasta"
    output:
         temp(f"data/temp/{TOKEN}/msa.fasta")
    run:
         cline = MuscleCommandline(input=str(input), out=str(output))
         stdout, stderr = cline()

rule dump:
    input:
         config["fasta_in"],
         f"data/temp/{TOKEN}/msa.fasta"
    output:
         config["fasta_out"]
    run:
         seqs, names = read_fasta(str(input[0]))
         fastas_aligned = [[str(record.name), str(record.seq)]
                           for record in sorted(SeqIO.parse(str(input[1]), "fasta"),
                                                key=lambda record: record.name)]
         d_new = dict((name, tup) for name, tup in fastas_aligned)
         # undo internal sorting from muscle
         seqs_sorted = [d_new[n] for n in names]
         save_fasta(str(output), seqs_sorted, names)

