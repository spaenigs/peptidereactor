from sklearn.model_selection import train_test_split
from glob import glob
import pandas as pd
import os

TOKEN = config["token"]

rule all:
    input:
         f"data/temp/{TOKEN}/generated.txt",
         config["csv_train_dir_out"],
         config["csv_val_1_dir_out"],
         config["csv_val_2_dir_out"],
         config["csv_test_dir_out"]

def compute_testset_sizes(csv_dir):
    smallest_testset_size = 1e6
    for csv_path in glob(csv_dir + "*.csv"):
        df = pd.read_csv(csv_path, index_col=0)
        if df.shape[0] < smallest_testset_size:
            smallest_testset_size = df.shape[0]
    n = smallest_testset_size
    for i in range(3):
        test_size = int(0.1 * n)
        n -= test_size
        yield test_size

rule hold_out_data:
    input:
         config["csv_dir_in"]
    output:
         temp(f"data/temp/{TOKEN}/generated.txt")
    run:
         def split(df, testset_size):
            X_train, X_test, y_train, y_test = \
                train_test_split(df.iloc[:,:-1],
                                 df["y"],
                                 test_size=testset_size,
                                 random_state=42,
                                 stratify=df["y"])
            X_train["y"], X_test["y"] = y_train, y_test
            return X_train, X_test

         ts, vs1, vs2 = list(compute_testset_sizes(str(input)))

         for csv_path in glob(str(input) + "*.csv"):
             csv_name = os.path.basename(csv_path)
             df = pd.read_csv(csv_path, index_col=0)
             # split train/test
             X_train_val1_val2, X_test = split(df, ts)
             # split train/val_1
             X_train_val2, X_val1 = split(X_train_val1_val2, vs1)
             # split train/val_2
             X_train, X_val2 = split(X_train_val2, vs2)
             # dump
             X_train.to_csv(str(config["csv_train_dir_out"]) + csv_name)
             X_val1.to_csv(str(config["csv_val_1_dir_out"]) + csv_name)
             X_val2.to_csv(str(config["csv_val_2_dir_out"]) + csv_name)
             X_test.to_csv(str(config["csv_test_dir_out"]) + csv_name)

         shell("touch {output}")