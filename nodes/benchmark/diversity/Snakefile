from glob import glob
from itertools import product
from pathos.multiprocessing import ProcessingPool as Pool

import pandas as pd
import numpy as np

import os
import yaml


def diversity_score(y_pred_1, y_pred_2):
     lo = len(y_pred_1)
     return 1/lo * sum(np.abs([y_pred_1[i]-y_pred_2[i] for i in range(lo)]))


TOKEN = config["token"]

METRICS_GROUP_1_DIR = config["group_1_in"]
METRICS_GROUP_1_CSVS = glob(config["group_1_in"] + "y_pred_cv_*.csv")
NAMES_GROUP_1 = [os.path.basename(p).replace(".csv", "") for p in METRICS_GROUP_1_CSVS]

METRICS_GROUP_2_DIR = config["group_2_in"]
METRICS_GROUP_2_CSVS = glob(config["group_2_in"] + "y_pred_cv_*.csv")
NAMES_GROUP_2 = [os.path.basename(p).replace(".csv", "") for p in METRICS_GROUP_2_CSVS]

NAMES_G1, NAMES_G2 = zip(*product(NAMES_GROUP_1, NAMES_GROUP_2))

rule all:
     input:
          config["csv_out"]

rule diversity:
     input:
          f"{METRICS_GROUP_1_DIR}{{name_g1}}.csv",
          f"{METRICS_GROUP_2_DIR}{{name_g2}}.csv"
     output:
          f"data/temp/{TOKEN}/{{name_g1}}_vs_{{name_g2}}.yaml"
     run:
          df_pred_1 = pd.read_csv(input[0], index_col=0)
          df_pred_2 = pd.read_csv(input[1], index_col=0)

          div_lst = []
          for i in range(50):
              y_pred_1 = df_pred_1.iloc[i, :].dropna()
              y_pred_2 = df_pred_2.iloc[i, :].dropna()
              div_lst += [diversity_score(y_pred_1, y_pred_2)]

          with open(output[0], "w") as f:
               ng1, ng2 = \
                    wildcards.name_g1.replace("y_pred_cv_", ""), \
                    wildcards.name_g2.replace("y_pred_cv_", "")
               res = float(np.mean(div_lst))
               data = {ng1: {ng2: res}, ng2: {ng1: res}}
               yaml.safe_dump(data, f)

rule collect:
     input:
          expand(f"data/temp/{TOKEN}/{{name_g1}}_vs_{{name_g2}}.yaml",
                 zip, name_g1=NAMES_G1, name_g2=NAMES_G2)
     output:
          config["csv_out"]
     run:
          df_res = pd.DataFrame(
               columns=set([p.replace("y_true_cv_", "") for p in NAMES_G1]),
               index=set([p.replace("y_true_cv_", "") for p in NAMES_G2]))

          for p in list(input):
               with open(p) as f:
                    df_res.update(yaml.safe_load(f))

          # for i, c in zip(df_res.index, df_res.columns):
          #      df_res.loc[i, c] = 0.0

          df_res.to_csv(output[0])