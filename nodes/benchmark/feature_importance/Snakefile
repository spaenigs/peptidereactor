from glob import glob

import pandas as pd
import numpy as np

import os
import yaml


def feature_importance_ratio(folds, threshold=0.5):
    threshold_tmp, features_summing_to_threshold = 0, 0
    df_imp_mean_sorted = folds.apply(np.mean, 0)\
        .sort_values(ascending=False)
    for i in df_imp_mean_sorted:
         if threshold_tmp >= threshold:
             break
         threshold_tmp += i
         features_summing_to_threshold += 1
    features = folds.shape[1]
    return \
        features_summing_to_threshold/features, \
        df_imp_mean_sorted[:features_summing_to_threshold+1].index


TOKEN = config["token"]

CSV_DIR = config["feat_imp_in"]
CSVS_IN = glob(config["feat_imp_in"] + "*feat_imp_cv_*.csv")

NAMES = [os.path.basename(p).replace(".csv", "").replace("feat_imp_cv", "")
         for p in CSVS_IN]

rule compute:
    input:
         f"{CSV_DIR}{{name}}.csv"
    output:
         f"data/temp/{TOKEN}/feat_imp_{{name}}.txt"
    run:
         df_folds = pd.read_csv(input[0], index_col=0)
         fir, if_indices = feature_importance_ratio(df_folds)
         with open(output[0], "w") as f:
             yaml.safe_dump({"feat_imp_ratio": fir,
                             "imp_feat_idx": if_indices})

rule collect:
    input:
         expand(f"data/temp/{TOKEN}/feat_imp_{{name}}.txt", name=NAMES)
    output:
         config["feat_imp_out"]
    run:
         df_res = pd.DataFrame
         for p in list(input):
             with open(p) as f:
                d = yaml.safe_load(f)
                name = os.path.basename(p).replace(".csv", "")
                df_res = pd.concat([df_res, pd.DataFrame({name: [d["feat_imp_ratio"]]})])

         df_res.to_csv(output[0])