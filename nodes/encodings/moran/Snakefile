from modlamp.core import read_fasta
from iFeature import Moran

import pandas as pd
import numpy as np
import os
import yaml

TOKEN = config["token"]
TARGET_FILES = config["csv_out"]

if type(TARGET_FILES) == list:
    TARGET_DIR = os.path.dirname(TARGET_FILES[0])
else:
    TARGET_DIR = os.path.dirname(TARGET_FILES)

rule all:
    input:
         config["csv_out"]

rule encode:
    input:
         config["fasta_in"],
         config["length_in"]
    output:
         temp(f"data/temp/{TOKEN}/moran_nlag_{{nlag_val}}.csv")
    run:
         seqs, names = read_fasta(input[0])

         with open(input[1]) as f:
             max_nlv = yaml.safe_load(f)

         fastas = [[n, s] for s, n in zip(seqs, names)]
         nlv = int(wildcards.nlag_val)

         if nlv > max_nlv:
             shell("touch {output}")
         else:
             res = np.array(Moran.Moran(fastas, nlag=int(wildcards.nlag_val)))
             df = pd.DataFrame(res[1:, 1:], columns=res[0, 1:])
             df.index = np.array(res)[1:, 0]
             df.to_csv(output[0])

rule dump:
    input:
         f"data/temp/{TOKEN}/moran_nlag_{{nlag_val}}.csv",
         config["classes_in"]
    output:
         f"{TARGET_DIR}/moran_nlag_{{nlag_val}}.csv"
    run:
         with open(input[1]) as f:
             classes = list(map(lambda l: int(l.rstrip()), f.readlines()))

         if os.path.getsize(input[0]) == 0:
             shell("touch {output}")
         else:
             df = pd.read_csv(input[0], index_col=0)
             df["y"] = classes
             df.dropna(inplace=True)
             df.to_csv(output[0])
