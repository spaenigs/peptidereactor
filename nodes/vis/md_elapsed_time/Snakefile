from modlamp.core import read_fasta

import pandas as pd
import altair as alt
import numpy as np

import re

TOKEN = config["token"]

rule all:
    input:
         config["html_dir_out"] + "md_elapsed_time.json"

rule total_elapsed_time:
    input:
         config["benchmark_csvs_in"]
    output:
         temp(f"data/temp/{TOKEN}/elapsed_time.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             df = pd.read_csv(p, index_col=0)
             res += [[dataset, df["s"].sum()/60/60]]

         pd.DataFrame(res, columns=["dataset", "hours"]).to_csv(output[0])

rule sequence_size:
    input:
         config["fastas_in"]
    output:
         temp(f"data/temp/{TOKEN}/sequence_size.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             seqs, _ = read_fasta(p)
             res += [[dataset, len(seqs)]]

         pd.DataFrame(res, columns=["dataset", "seq_size"]).to_csv(output[0])

rule mean_sequence_len:
    input:
         config["fastas_in"]
    output:
         temp(f"data/temp/{TOKEN}/mean_sequence_len.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             seqs, _ = read_fasta(p)
             res += [[dataset, np.mean([len(s) for s in seqs])]]

         pd.DataFrame(res, columns=["dataset", "mean_seq_len"]).to_csv(output[0])

rule concat_data:
    input:
         f"data/temp/{TOKEN}/elapsed_time.csv",
         f"data/temp/{TOKEN}/sequence_size.csv",
         f"data/temp/{TOKEN}/mean_sequence_len.csv"
    output:
         config["html_dir_out"] + "elapsed_time_data.json"
    run:
         df1, df2, df3 = pd.read_csv(input[0]), pd.read_csv(input[1]), pd.read_csv(input[2])
         df_tmp = pd.merge(df1, df2, on="dataset")
         pd.merge(df_tmp, df3, on="dataset").to_json(output[0], orient="records")

rule make_chart:
    input:
         config["html_dir_out"] + "elapsed_time_data.json"
    output:
         config["html_dir_out"] + "md_elapsed_time.json"
    run:
         url = input[0]

         bars = alt.Chart(url).mark_bar().encode(
             x=alt.X("dataset:N", title="Dataset", sort="y"),
             y=alt.Y("hours:Q", title="Elapsed time (h)"),
             tooltip="hours:Q"
         )

         scatter = alt.Chart(url).mark_point(filled=True).encode(
             x=alt.X("hours:Q", title="Elapsed time (h)"),
             y=alt.Y("seq_size:Q", title="# of sequences", sort="-x"),
             tooltip="dataset:N"
         )

         scatter2 = alt.Chart(url).mark_point(filled=True).encode(
             x=alt.X("hours:Q", title="Elapsed time (h)"),
             y=alt.Y("mean_seq_len:Q", title="Mean sequence length", sort="-x"),
             tooltip="dataset:N"
         )

         chart = alt.vconcat(
             bars, scatter, scatter2,
             center=True,
             title=alt.TitleParams(
                 text=[
                     "A title."
                     "",
                     "",
                     ""
                 ],
                 anchor="middle"
             ),
             config=alt.Config(
                 legend=alt.LegendConfig(titleFontSize=12, labelFontSize=12),
                 axis=alt.AxisConfig(titleFontSize=12, titleFontWeight="normal")
             )
         )

         chart_json = chart.to_json(indent=None)

         with open(output[0], "w") as f:
            f.write(chart_json)
            f.flush()

