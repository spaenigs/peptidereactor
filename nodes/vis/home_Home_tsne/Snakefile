from iFeature import AAC
from modlamp.core import read_fasta
from sklearn.manifold import TSNE

import pandas as pd
import altair as alt

import re
import yaml

TOKEN = config["token"]

rule all:
    input:
         config["html_dir_out"] + "home_tsne.json"

rule total_elapsed_time:
    input:
         config["benchmark_csvs_in"]
    output:
         temp(f"data/temp/{TOKEN}/elapsed_time.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             df = pd.read_csv(p, index_col=0)
             res += [[dataset, df["s"].sum()/60/60]]

         pd.DataFrame(res, columns=["dataset", "hours"]).to_csv(output[0])

rule sequence_size:
    input:
         config["fastas_in"]
    output:
         temp(f"data/temp/{TOKEN}/sequence_size.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             seqs, _ = read_fasta(p)
             res += [[dataset, len(seqs)]]

         pd.DataFrame(res, columns=["dataset", "seq_size"]).to_csv(output[0])

rule concat_data:
    input:
         f"data/temp/{TOKEN}/elapsed_time.csv",
         f"data/temp/{TOKEN}/sequence_size.csv"
    output:
         config["html_dir_out"] + "elapsed_time_data.json"
    run:
         df1, df2 = pd.read_csv(input[0]), pd.read_csv(input[1])
         df_tmp = pd.merge(df1, df2, on="dataset").to_json(output[0], orient="records")

rule transform_tsne_data:
    input:
         fastas=config["fastas_in"],
         classes=config["classes_in"]
    output:
          temp(f"data/temp/{TOKEN}/tsne_data.csv")
    run:
        df_res = pd.DataFrame()
        for fasta_path, class_path in zip(input.fastas, input.classes):
            seqs, names = read_fasta(fasta_path)
            with open(class_path) as f:
                classes = list(map(lambda l: int(l.rstrip()), f.readlines()))
            seq_tuples = [[name, tup[0]]
                          for name, tup in zip(names, zip(seqs, classes))
                          if tup[1] == 1]
            df_tmp = pd.DataFrame([res[1:] for res in AAC.AAC(seq_tuples, order=None)][1:])
            df_tmp["dataset"] = re.findall("data/(.*?)/", fasta_path)[0]
            df_res = pd.concat([df_res, df_tmp])

        X_embedded = TSNE(n_components=2, n_jobs=-1).fit_transform(df_res.iloc[:, :-1].values)

        df_tsne = pd.DataFrame(X_embedded)
        df_tsne.columns = ["x", "y"]
        df_tsne["dataset"] = df_res["dataset"].to_list()

        df_tsne.to_csv(output[0])

rule combine_data:
    input:
         f"data/temp/{TOKEN}/tsne_data.csv"
    output:
         config["html_dir_out"] + "tsne_data.json",
         temp(f"data/temp/{TOKEN}/axis_data.yaml")
    script:
         "scripts/combine_data.py"

rule make_chart:
    input:
         config["html_dir_out"] + "elapsed_time_data.json",
         config["html_dir_out"] + "tsne_data.json",
         f"data/temp/{TOKEN}/axis_data.yaml"
    output:
         config["html_dir_out"] + "home_tsne.json"
    run:
         with open(input[2]) as f:
             x_min, x_max,y_min, y_max = yaml.safe_load(f)

         selection = alt.selection_single(
             fields=["dataset"],
             init={"dataset": "hiv_ddi"},
             empty="none"
         )

         axis = alt.Axis(grid=False, titleFontWeight="normal")

         scatter = alt.Chart(
             input[0],
             title="Multiple datasets"
         ).mark_point(filled=True, size=60).encode(
             x=alt.X(
                 "hours:Q",
                 title="log(Computation time) (h)",
                 scale=alt.Scale(type='log'),
                 axis=axis
             ),
             y=alt.Y(
                 "seq_size:Q",
                 title="log(# of sequences)",
                 sort="-x",
                 scale=alt.Scale(type='log'),
                 axis=axis
             ),
             tooltip="dataset:N",
             color=alt.condition(selection, alt.value("#4C78A8"), alt.value("lightgrey"))
         ).add_selection(
             selection
         ).properties(
             height=250,
             width=250
         ).interactive()

         scatterc = alt.Chart().mark_circle(size=10, color="#fdc086").encode(
             x=alt.X(
                 "x:Q",
                 title="tSNE-1",
                 axis=axis,
                 scale=alt.Scale(domain=[x_min, x_max])
             ),
             y=alt.Y(
                 "y:Q",
                 title="tSNE-2",
                 axis=axis,
                 scale=alt.Scale(domain=[y_min, y_max])
             )
         ).transform_filter(
             selection
         )

         hullc = alt.Chart().mark_line(
             color="#386cb0",
             strokeDash=[5, 3],
             strokeWidth=1
         ).encode(
             x="x:Q",
             y="y:Q",
             order="order:O"
         ).transform_filter(
             alt.datum.hull_vertex == True
         ).transform_filter(
             selection
         )

         textc = alt.Chart().mark_text().encode(
             x="x:Q",
             y="y:Q",
             text="text:N"
         ).transform_calculate(
             text="join(['area=', round(datum.area)], '')"
         ).transform_filter(
             (alt.datum.x == 0) and (alt.datum.y == 0)
         ).transform_filter(
             selection
         )

         tsnec = alt.layer(
             scatterc, hullc, textc,
             data=input[1],
             title="Single dataset"
         ).properties(
             height=250,
             width=250
         )

         chart_json = alt.hconcat(scatter, tsnec).to_json(indent=None)

         with open(output[0], "w") as f:
            f.write(chart_json)
            f.flush()

