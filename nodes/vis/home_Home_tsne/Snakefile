from iFeature import AAC
from modlamp.core import read_fasta
from sklearn.manifold import TSNE

import pandas as pd

import re

from nodes.vis.home_Home_tsne.scripts.utils import wrap_text

TOKEN = config["token"]

rule all:
    input:
         config["html_dir_out"] + "home_Home_tsne.json"

rule total_elapsed_time:
    input:
         config["benchmark_csvs_in"]
    output:
         temp(f"data/temp/{TOKEN}/elapsed_time.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             df = pd.read_csv(p, index_col=0)
             res += [[dataset, df["s"].sum()/60/60]]

         pd.DataFrame(res, columns=["dataset", "hours"]).to_csv(output[0])

rule sequence_size:
    input:
         config["fastas_in"]
    output:
         temp(f"data/temp/{TOKEN}/sequence_size.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             seqs, _ = read_fasta(p)
             res += [[dataset, len(seqs)]]

         pd.DataFrame(res, columns=["dataset", "seq_size"]).to_csv(output[0])

rule concat_data:
    input:
         f"data/temp/{TOKEN}/elapsed_time.csv",
         f"data/temp/{TOKEN}/sequence_size.csv"
    output:
         temp("data/temp/{TOKEN}/elapsed_time_data.csv")
    run:
         df1, df2 = pd.read_csv(input[0], index_col=0), pd.read_csv(input[1], index_col=0)
         pd.merge(df1, df2, on="dataset").to_csv(output[0])

rule annotate_data:
    input:
         f"data/temp/{TOKEN}/elapsed_time_data.csv",
         config["readmes_in"]
    output:
         config["html_dir_out"] + "elapsed_time_data.json"
    run:
         df_res = pd.read_csv(input[0], index_col=0)

         desc_col, ref_col = [], []
         for ds in df_res.dataset:
             path = [p for p in list(input[1:]) if ds in p][0]
             with open(path) as f:
                 col1, col2 = [], []
                 for h1, h2 in re.findall("\|(.*?)\|(.*?)\|", f.read()):
                     col1 += [h1]
                     col2 += [h2]
                 desc_col += [wrap_text(col1[-1])]
                 ref_col += [wrap_text(col2[-1])]

         df_res["desc"] = desc_col
         df_res["ref"] = ref_col
         df_res.to_json(output[0], orient="records")

rule transform_tsne_data:
    input:
         fastas=config["fastas_in"],
         classes=config["classes_in"]
    output:
          temp(f"data/temp/{TOKEN}/tsne_data.csv")
    run:
        df_res = pd.DataFrame()
        for fasta_path, class_path in zip(input.fastas, input.classes):
            seqs, names = read_fasta(fasta_path)
            with open(class_path) as f:
                classes = list(map(lambda l: int(l.rstrip()), f.readlines()))
            seq_tuples = [[name, tup[0]]
                          for name, tup in zip(names, zip(seqs, classes))
                          if tup[1] == 1]
            df_tmp = pd.DataFrame([res[1:] for res in AAC.AAC(seq_tuples, order=None)][1:])
            df_tmp["dataset"] = re.findall("data/(.*?)/", fasta_path)[0]
            df_res = pd.concat([df_res, df_tmp])

        X_embedded = TSNE(n_components=2, n_jobs=-1).fit_transform(df_res.iloc[:, :-1].values)

        df_tsne = pd.DataFrame(X_embedded)
        df_tsne.columns = ["x", "y"]
        df_tsne["dataset"] = df_res["dataset"].to_list()

        df_tsne.to_csv(output[0])

rule combine_data:
    input:
         f"data/temp/{TOKEN}/tsne_data.csv"
    output:
         config["html_dir_out"] + "tsne_data.json",
         temp(f"data/temp/{TOKEN}/axis_data.yaml")
    script:
         "scripts/combine_data.py"

rule make_chart:
    input:
         config["html_dir_out"] + "elapsed_time_data.json",
         config["html_dir_out"] + "tsne_data.json",
         f"data/temp/{TOKEN}/axis_data.yaml"
    output:
         config["html_dir_out"] + "home_Home_tsne.json"
    script:
         "scripts/make_chart.py"

