from iFeature import AAC
from modlamp.core import read_fasta
from sklearn.manifold import TSNE

import pandas as pd
import altair as alt

import re
import yaml

TOKEN = config["token"]

rule all:
    input:
         config["html_dir_out"] + "md_tsne.json"

rule transform_tsne_data:
    input:
         fastas=config["fastas_in"],
         classes=config["classes_in"]
    output:
          temp(f"data/temp/{TOKEN}/tsne_data.csv")
    run:
        df_res = pd.DataFrame()
        for fasta_path, class_path in zip(input.fastas, input.classes):
            seqs, names = read_fasta(fasta_path)
            with open(class_path) as f:
                classes = list(map(lambda l: int(l.rstrip()), f.readlines()))
            seq_tuples = [[name, tup[0]]
                          for name, tup in zip(names, zip(seqs, classes))
                          if tup[1] == 1]
            df_tmp = pd.DataFrame([res[1:] for res in AAC.AAC(seq_tuples, order=None)][1:])
            df_tmp["dataset"] = re.findall("data/(.*?)/", fasta_path)[0]
            df_res = pd.concat([df_res, df_tmp])

        X_embedded = TSNE(n_components=2, n_jobs=-1).fit_transform(df_res.iloc[:, :-1].values)

        df_tsne = pd.DataFrame(X_embedded)
        df_tsne.columns = ["x", "y"]
        df_tsne["dataset"] = df_res["dataset"].to_list()

        df_tsne.to_csv(output[0])

rule combine_data:
    input:
         f"data/temp/{TOKEN}/tsne_data.csv"
    output:
         config["html_dir_out"] + "tsne_data.json",
         f"data/temp/{TOKEN}/axis_data.yaml"
    script:
         "scripts/combine_data.py"

rule tsne_chart:
    input:
         config["html_dir_out"] + "tsne_data.json",
         f"data/temp/{TOKEN}/axis_data.yaml"
    output:
         config["html_dir_out"] + "md_tsne.json"
    run:
         df_tsne = pd.read_json(input[0])

         with open(input[1]) as f:
             x_min, x_max,y_min, y_max = yaml.safe_load(f)

         input_dropdown = alt.binding_select(options=sorted(df_tsne.range_batch.unique()))
         selection = alt.selection_single(
             fields=['range_batch'],
             bind=input_dropdown,
             init={"range_batch": "1-12"},
             name="tSNE area"
         )

         scatterc = alt.Chart().mark_circle(
             size=3,
             color="#fdc086"
         ).encode(
             x=alt.X(
                 "x:Q",
                 title="tSNE-1",
                 axis=alt.Axis(grid=False, titleFontWeight="normal"),
                 scale=alt.Scale(domain=[x_min, x_max])
             ),
             y=alt.Y(
                 "y:Q",
                 title="tSNE-2",
                 axis=alt.Axis(grid=False, titleFontWeight="normal"),
                 scale=alt.Scale(domain=[y_min, y_max])
             )
         )

         hullc = alt.Chart().mark_line(
             color="#386cb0",
             strokeDash=[5, 3],
             strokeWidth=1
         ).encode(
             x="x:Q",
             y="y:Q",
             order="order:O"
         ).transform_filter(
             alt.datum.hull_vertex == True
         )

         textc = alt.Chart().mark_text().encode(
             x="x:Q",
             y="y:Q",
             text="text:N"
         ).transform_calculate(
             text="join(['area=', round(datum.area)], '')"
         ).transform_filter(
             (alt.datum.x == 0) and (alt.datum.y == 0)
         )

         chart = alt.layer(scatterc, hullc, textc, data=input[0]).properties(
             width=130,
             height=130
         ).facet(
             facet=alt.Facet(
                 "dataset:N",
                 title=None,
                 sort=alt.EncodingSortField("area")
             ),
             columns=4
         ).transform_filter(
             selection
         ).add_selection(
             selection
         )

         chart_json = alt.vconcat(
             chart,
              title=alt.TitleParams(
                  text=[
                      "tSNE-based embedding of sequences part of the positive class. The ordering of",
                      "datasets corresponds  to the respective cluster area. Click on the button below,",
                      "in order to display further datasets.",
                      "",
                      ""
                  ],
                  anchor="middle"
              ),
              config=alt.Config(
                  view=alt.ViewConfig(width=600),
                  legend=alt.LegendConfig(titleFontSize=12, labelFontSize=12),
                  axis=alt.AxisConfig(titleFontSize=12, titleFontWeight="normal")
              )
         ).to_json(indent=None)

         with open(output[0], "w") as f:
             f.write(chart_json)
             f.flush()
