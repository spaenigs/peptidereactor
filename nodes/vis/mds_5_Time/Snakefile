from modlamp.core import read_fasta

import pandas as pd
import altair as alt
import numpy as np

import re

TOKEN = config["token"]

NAME = "mds_5_Time"

rule all:
    input:
         config["html_dir_out"] + f"{NAME}.json"

rule total_elapsed_time:
    input:
         config["benchmark_csvs_in"]
    output:
         temp(f"data/temp/{TOKEN}/elapsed_time.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             df = pd.read_csv(p, index_col=0)
             res += [[dataset, df["s"].sum()/60/60]]

         pd.DataFrame(res, columns=["dataset", "hours"]).to_csv(output[0])

rule sequence_size:
    input:
         config["fastas_in"]
    output:
         temp(f"data/temp/{TOKEN}/sequence_size.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             seqs, _ = read_fasta(p)
             res += [[dataset, len(seqs)]]

         pd.DataFrame(res, columns=["dataset", "seq_size"]).to_csv(output[0])

rule mean_sequence_len:
    input:
         config["fastas_in"]
    output:
         temp(f"data/temp/{TOKEN}/mean_sequence_len.csv")
    run:
         res = []
         for p in list(input):
             dataset = re.findall("data/(.*?)/", p)[0]
             seqs, _ = read_fasta(p)
             res += [[dataset, np.mean([len(s) for s in seqs])]]

         pd.DataFrame(res, columns=["dataset", "mean_seq_len"]).to_csv(output[0])

rule concat_data:
    input:
         f"data/temp/{TOKEN}/elapsed_time.csv",
         f"data/temp/{TOKEN}/sequence_size.csv",
         f"data/temp/{TOKEN}/mean_sequence_len.csv"
    output:
         config["html_dir_out"] + "elapsed_time_data.json"
    run:
         df1, df2, df3 = pd.read_csv(input[0]), pd.read_csv(input[1]), pd.read_csv(input[2])
         df_tmp = pd.merge(df1, df2, on="dataset")
         pd.merge(df_tmp, df3, on="dataset").to_json(output[0], orient="records")

rule make_chart:
    input:
         config["html_dir_out"] + "elapsed_time_data.json"
    output:
         config["html_dir_out"] + f"{NAME}.json"
    run:
         url = input[0]

         selection = alt.selection_single()

         bars = alt.Chart(url).mark_bar().encode(
             x=alt.X("dataset:N", title="Dataset", sort="y"),
             y=alt.Y("hours:Q", title="Computation time (h)"),
             color=alt.condition(selection, alt.value("#4C78A8"), alt.value("lightgrey")),
             tooltip="h:N"
         ).transform_calculate(
             h="format(datum.hours, '.2f') + 'h'"
         ).add_selection(
             selection
         ).properties(
             width=885
         )

         scatter = alt.Chart(url).mark_point(filled=True, size=60).encode(
             x=alt.X("hours:Q", title="Computation time (h)"),
             y=alt.Y("seq_size:Q", title="# of sequences", sort="-x"),
             opacity=alt.condition(selection, alt.value(1.0), alt.value(0.1)),
             tooltip="dataset:N"
         ).add_selection(
             selection
         )

         scatter2 = alt.Chart(url).mark_point(filled=True, size=60).encode(
             x=alt.X("hours:Q", title="Computation time (h)"),
             y=alt.Y("mean_seq_len:Q", title="Mean sequence length", sort="-x"),
             opacity=alt.condition(selection, alt.value(1.0), alt.value(0.1)),
             tooltip="dataset:N"
         ).add_selection(
             selection
         )

         chart = alt.vconcat(
             bars, alt.hconcat(scatter, scatter2),
             center=True,
             title=alt.TitleParams(
                 text=[
                     "Total computation time per dataset (top), the number of sequences vs. computation",
                     "time (bottom-left), and mean sequence length per dataset vs. computation time (bottom-right).",
                     "Click on a field to enable filtering by datasets."
                     "",
                     ""
                 ],
                 anchor="middle"
             ),
             config=alt.Config(
                 legend=alt.LegendConfig(titleFontSize=12, labelFontSize=12),
                 axis=alt.AxisConfig(titleFontSize=12, titleFontWeight="normal")
             )
         )

         chart_json = chart.to_json(indent=None)

         with open(output[0], "w") as f:
            f.write(chart_json)
            f.flush()

