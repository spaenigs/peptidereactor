import jinja2 as j2

import json
import re

TOKEN = config["token"]

include:
    "overview.smk"

include:
    "metrics.smk"

include:
    "roc_pr.smk"

include:
    "similarity.smk"

include:
    "pairwise_diversity.smk"

include:
    "critical_difference.smk"

include:
    "amino_acid_comp.smk"

include:
    "datasets_dendrogram.smk"

include:
    "elapsed_time.smk"

rule aggregate_charts:
    input:
         expand(f"data/temp/{TOKEN}/{{chart}}.json",
                chart=[
                    "overview",
                    "metrics",
                    "roc_pr",
                    "similarity",
                    "pairwise_diversity",
                    "critical_difference",
                    "amino_acid_comp",
                    "datasets_dendrogram",
                    "elapsed_time"
                ])
    output:
         config["html_out"]
    run:
         objects = []
         for i, p in enumerate(list(input), start=1):
             tmp = {}
             with open(p) as f:
                 tmp["i"] = i
                 tmp["spec"] = json.load(f)
                 if "overview" in p:
                     tmp["header"] = "General overview"
                 elif "metrics" in p:
                     tmp["header"] = "Metrics"
                 elif "roc_pr" in p:
                     tmp["header"] = "ROC and PR"
                 elif "similarity" in p:
                     tmp["header"] = "Similarity"
                 elif "pairwise_diversity" in p:
                     tmp["header"] = "Pairwise diversity"
                 elif "critical_difference" in p:
                     tmp["header"] = "Critical difference"
                 elif "amino_acid_comp" in p:
                     tmp["header"] = "Amino acid composition"
                 elif "datasets_dendrogram" in p:
                     tmp["header"] = "Datasets correlation"
                 elif "elapsed_time" in p:
                     tmp["header"] = "Elapsed time"
                 tmp["id"] = tmp["header"].replace(" ", "").lower()
                 objects += [tmp]

         env = j2.Environment(
             loader=j2.FileSystemLoader("nodes/vis/single_dataset/templates/"),
             autoescape=j2.select_autoescape(["html", "xml"])
         )

         dataset = re.findall("data/(.*?)/", output[0])[0]

         template = env.get_template("single_dataset.html")
         template\
             .stream(dataset=dataset, objects=objects)\
             .dump(output[0])
