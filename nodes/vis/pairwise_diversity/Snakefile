import altair as alt

import joblib
import os

from nodes.vis.pairwise_diversity.scripts.utils import *
from nodes.vis.pairwise_diversity.scripts.pairwise_diversity import *

TOKEN = config["token"]

SIMILARITY_DIR_IN = os.path.commonpath(
    [config["similarity_dir_group_1_in"], config["similarity_dir_group_2_in"]]) + "/"

ENSEMBLE_CV_DIR_IN = os.path.commonpath(
    [config["ensemble_cv_group_1a_in"], config["ensemble_cv_group_2a_in"],
     config["ensemble_cv_group_1b_in"], config["ensemble_cv_group_2b_in"]]) + "/"

rule all:
    input:
         config["html_dir_out"] + "pairwise_diversity.json"

rule pairwise_div_transform_data:
    input:
         config["metrics_dir_in"] + "f1.csv",
         SIMILARITY_DIR_IN + "{comparision}/diversity.csv",
         ENSEMBLE_CV_DIR_IN + "{comparision}/"
    output:
         config["html_dir_out"] + "{comparision}.json"
    run:
         df_f1 = pd.read_csv(input[0], index_col=0)
         df_div = pd.read_csv(input[1], index_col=0)

         medians = df_f1.apply(np.median).sort_values(ascending=False)
         indices = medians.index.tolist()

         if wildcards.comparision == "seq_vs_str":
             indices_1 = [i for i in indices if not is_struc_based(i)][:15]
             indices_2 = [i for i in indices if is_struc_based(i)][:5]
         else:
             indices_1 = indices[:15]
             indices_2 = indices[15:30]

         df_div_sub = df_div.loc[indices_1, indices_2]

         df_crap = get_crap_combination(input[2], df_div, medians)
         df_low = get_low_combination(input[2], df_div_sub, medians)
         df_mid = get_mid_combination(input[2], df_div_sub, medians)
         df_high = get_high_combination(input[2], df_div_sub, medians)
         df_highest_f1 = \
             get_highest_f1_combination(input[2], indices_1[0], indices_2[0], df_div_sub, medians)

         df = pd.concat([df_crap, df_low, df_mid, df_high, df_highest_f1])
         df.dropna().to_json(output[0], orient="records")

rule create_scatter_chart:
    input:
         config["html_dir_out"] + "{comparision}.json"
    output:
         temp(f"data/temp/{TOKEN}/{{comparision}}.scjl")
    run:
         url = input[0]

         if wildcards.comparision == "all_vs_all":
             title = "All vs. all encodings"
         else:
             title = "Sequence vs. structure based encodings"

         def base_chart(xt, yt):
             base = alt.Chart(url).mark_point(text=title, filled=True, size=5).encode(
                 x=alt.X("x:Q", title=xt, scale=alt.Scale(domain=[0.0, 1.0]), axis=alt.Axis(labels=False)),
                 y=alt.Y("y:Q", title=yt, scale=alt.Scale(domain=[0.0, 1.0]), axis=alt.Axis(labels=False)),
                 color=alt.Color(
                     "class:N", title="Class label",
                     scale=alt.Scale(domain=[0, 1], range=["#7b3294", "#008837"])
                 )
             ).properties(
                 width=250,
                 height=250
             )
             return base

         df = pd.read_json(input[0])
         chart = alt.hconcat()
         for n, (_, _, _, div, e1, e2, div_score, dbs) in df.groupby("diversity")\
                 .apply(lambda df: df.iloc[0, :])\
                 .iterrows():
             chart |= alt.concat(
                 base_chart(e1, e2).transform_filter(alt.datum.diversity == div),
                 title=alt.TitleParams(text=f"div: {div_score}, dbs: {np.round(dbs, 2)}", anchor="middle")
             )

         chart = alt.hconcat(
             chart,
             title=alt.TitleParams(
                text=[title, ""],
                fontSize=12,
                fontWeight="bold",
                anchor="start"
            )
         )

         joblib.dump(chart, output[0])

rule create_pairwise_diversity_chart:
    input:
         expand(f"data/temp/{TOKEN}/{{comparision}}.scjl",
                comparision=["all_vs_all", "seq_vs_str"])
    output:
         config["html_dir_out"] + "pairwise_diversity.json"
    run:
         paths = list(input)

         sc1 = joblib.load(path(paths, "seq_vs_str", ""))
         sc2 = joblib.load(path(paths, "all_vs_all", ""))

         chart_json = alt.vconcat(
             sc1, sc2,
             spacing=30,
             title=alt.TitleParams(
                 text=[
                     "Predicted probabilities for the respective class labels applied on the x- and y-axis.",
                     "Encodings are selected with respect to their level of disagreement (div) and",
                     "cluster quality, depicted as the Davis-Bouldin score (dbs, lower is better)."
                     "",
                     ""
                 ],
                 fontSize=12, fontWeight="bold", anchor="middle"
             ),
             config=alt.Config(
                 legend=alt.LegendConfig(titleFontSize=12, labelFontSize=12),
                 axis=alt.AxisConfig(titleFontSize=12, titleFontWeight="normal"),
                 title=alt.TitleConfig(fontSize=11, fontWeight="normal")
             )
         ).to_json(indent=None)

         with open(output[0], "w") as f:
             f.write(chart_json)
             f.flush()
